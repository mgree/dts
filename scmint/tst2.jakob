
(define false #f)
(define true #t)
(define (first x) (car x))
(define (second x) (car (cdr x)))
(define (third x) (car (cdr (cdr x))))
(define (dom sig) (first sig))
(define (ran sig) (third sig))
(define (o c1 c2) (list c1 (quote &) c2))
(define (ar c1 c2) (list c1 (quote o->) c2))
(define (iscomp? c) (if (list? c) (if (> (length c) 1) (equal? (second c) (quote &)) false) false))
(define (isarrow? ty) (if (list? ty) (if (> (length ty) 1) (equal? (second ty) (quote o->)) false) false))
(define (match? x y) (if (equal? x y) true (if (equal? x (quote o->)) (isarrow? y) (if (equal? y (quote o->)) (isarrow? x) false))))
(define (pat? sig d r) (and (match? (dom sig) d) (match? (ran sig) r)))
(define (simple sig) (if (pat? sig (quote D) (quote D)) (quote IOTAD) (if (pat? sig (quote D) (quote (D o-> D))) (quote FUNC?) (if (pat? sig (quote B) (quote D)) (quote BOOL!) (if (pat? sig (quote (D o-> D)) (quote D)) (quote FUNC!) (if (pat? sig (quote B) (quote B)) (quote IOTAB) (if (pat? sig (quote D) (quote B)) (quote BOOL?) false)))))))
(define (canon sig) (let sim (simple sig) (if sim sim (if (pat? sig (quote D) (quote o->)) (let c (canon (list (dom (ran sig)) (quote <) (quote D))) d (canon (list (quote D) (quote <) (ran (ran sig)))) (if (and c d) (list (quote FUNC?) (quote &) (list c (quote o->) d)) false)) (if (pat? sig (quote o->) (quote D)) (let c (canon (list (quote D) (quote <) (dom (dom sig)))) d (canon (list (ran (dom sig)) (quote <) (quote D))) (if (and c d) (list (list c (quote o->) d) (quote &) (quote FUNC!)) false)) (if (pat? sig (quote o->) (quote B)) (let c (canon (list (dom sig) (quote <) (quote D))) (if c (list c (quote &) (quote BOOL?)) false)) (if (pat? sig (quote B) (quote o->)) (let c (canon (list (quote D) (quote <) (ran sig))) (if c (list (quote BOOL!) (quote &) c) false)) (if (pat? sig (quote o->) (quote o->)) (let c (canon (list (dom (ran sig)) (quote <) (dom (dom sig)))) d (canon (list (ran (dom sig)) (quote <) (ran (ran sig)))) (if (and c d) (list c (quote o->) d) false)) false))))))))
(define (decomp? c) (if (iscomp? c) (and (isarrow? (first c)) (isarrow? (third c)))))
(define (decomp1 c d) (ar (o (dom d) (dom c)) (o (ran c) (ran d))))
(canon (quote (((D o-> D) o-> B) < (B o-> D))))
End of input reached ...